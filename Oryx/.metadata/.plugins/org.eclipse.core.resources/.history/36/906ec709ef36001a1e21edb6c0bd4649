package objects;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.tools.DocumentationTool.Location;

public class Odin {
	
//	Variables
	
	AttackList attack = new AttackList();

	private Point coordinates;
	private int w, h;
	
	private double scale, t = 158;
	private double moveX, moveY;
//	private boolean moveUp = true, moveRight = false;
	
	private int health = 13800, health2 = 1380;
	
//	private boolean attacking;
	
	private int defeatCounter = 0; // Times Odin's health has been reduced to 0 and dictates which attacks are used.
	
	private int animationTimer;
	
	private BufferedImage[] odinIdle = new BufferedImage[6];
	private BufferedImage[] odinAttack = new BufferedImage[13];
	
	private BufferedImage odinIndicator;
	
	private int attackTimer = 3000;
	private boolean bonus = false;
	
	private Image odin;
	private Image indicator;
	
//	Constructor
	
	public Odin(int x, int y, int w, int h){
		coordinates = new Point(x, y);
		this.w = w;
		this.h = h;
		bufferImages();
		odin = odinIdle[0];
		indicator = odinIndicator;
	}
	
//	Methods
	
	public void bufferImages() {
//		Idle Frames
		for(int i = 0; i < odinIdle.length; i++) {
			try {
			    odinIdle[i] = ImageIO.read(new File("src/images/Odin"+(i+1)+".png"));
			} catch (IOException e) { 
			}
		}
//		Attack Frames
		for(int i = 0; i < odinAttack.length; i++) {
			try {
			    odinAttack[i] = ImageIO.read(new File("src/images/Odin"+(i+1)+".png"));
			} catch (IOException e) { 
			}
		}
//		Indicator
		try {
			odinIndicator = ImageIO.read(new File("src/images/Enemy_Indicator.png"));
		} catch (IOException e) {
		}
	}	
	
	public void attack(ArrayList<BossBullet> bullets, Player player) {
		for (int i = 0; i < bullets.size(); i++) {
			bullets.get(i).move();		
		}
		
		if (attackTimer <= 0) {
			if (getHealth() > 1380) {
				setHealth(1380);
			} else if (getHealth() > 0) {
				setHealth(0);
				setHealth2(0);
			}
			attackTimer = 3000;
		}
		
		if (getHealth() <= 0) {
			defeatCounter += 1;
			attack.rest();
			attackTimer = 3000+(1000*defeatCounter);
			setBonus(false);
			setHealth(13800);
			setHealth2(1380);
		}
		if (getHealth() == 1380 && !getBonus()) {
			attack.rest();
			attackTimer = 3000+(1000*defeatCounter);
		}
		
		if (defeatCounter == 0 && getHealth() > 1380) {
			attack.chaser(bullets, getX()+(getW()/2), getY()+(getH()/2), player.getX()+(player.getW()/2), player.getY()+(player.getH()/2));
//			moveFigureEight();
//			attack.flower(bullets, getX() + (getW()/2), getY() + (getH()/2));
			moveStraight(500, 400);
		} else if (defeatCounter == 0 && getHealth() <= 1380) {
			attack.zigzag(bullets, getX() + (getW()/2), getY() + (getH()/2));
		} else if (defeatCounter == 1 && getHealth() > 1380) {
			attack.vortex(bullets, getX() + (getW()/2), getY() + (getH()/2));
		} else if (defeatCounter == 1 && getHealth() <= 1380) {
			attack.fractal(bullets, getX() + (getW()/2), getY() + (getH()/2));
		}
		
//		attack.fractal(bullets, getX() + (getW()/2), getY() + (getH()/2)); !Don't use!		
//		attack.doubleSpiral(bullets, (getX() + (getW()/2)) - 200, getY() + (getH()/2), (getX() + (getW()/2)) + 200, getY() + (getH()/2));
//		attack.circle(bullets, getX() + (getW()/2), getY() + (getH()/2));
//		attack.accelerate(bullets, getX() + (getW()/2), getY() + (getH()/2));
	}
	
//	Movement Crap
	
	public void moveFigureEight() {
//		Figure Eight
		moveX = ((200 * Math.cos(t/100)) + 326);
		moveY = ((50 * Math.sin((t/100)*2)) + 100);
			
		setX((int)moveX);
		setY((int)moveY);
		t++;
	}
	
	public void moveStraight(int targetX, int targetY) {
//		TODO
//		Goes straight to the target location.
//		Also some issues
		
		double tempAngle = Math.atan2(getX()-targetX, getY()-targetY);
		
		double angleX, angleY;
		
		angleX = Math.sin(tempAngle);
		angleY = Math.cos(tempAngle);
		
		moveX = (double)getX()-angleX;
		moveY = (double)getY()-angleY;
		
		setX((int)Math.round(moveX));
		setY((int)Math.round(moveY));
	}
	
	public void collision(ArrayList<PlayerBullet> bullets, Player player) {
		for(int i = 0; i < bullets.size(); i++) {
			if (bullets.get(i).getX() + bullets.get(i).getW() > getX() && bullets.get(i).getY() + bullets.get(i).getH() > getY()
					&& getX() + getW() > bullets.get(i).getX() && getY() + getH() > bullets.get(i).getY()) {
				bullets.remove(i);
				player.setScore(player.getScore() + 10);
				if (getHealth() > 1380) {
					health -= 10;
				} else {
					if (defeatCounter == 1) {
						health -= 4;
						health2 -= 4;
					} else {
						health -= 2;
						health2 -= 2;	
					}
				}
			}
		}
	}
	
	public void removeBullets(ArrayList<BossBullet> bullets) {
		for (int i = 0; i < bullets.size(); i++) {
			if (bullets.get(i).getX() + bullets.get(i).getW() < 10 || bullets.get(i).getY() + bullets.get(i).getH() < 15 ||
					bullets.get(i).getX() > 715 || bullets.get(i).getY() > 756) {
				bullets.remove(i);
			}
		}
	}
	
	public void removeAllBullets(ArrayList<BossBullet> bullets) {
		for (int i = 0; i < bullets.size(); i++) {
			while (bullets.size() != 0) {
				bullets.remove(i);
			}
		}
	}
	
	public void draw(Graphics g) {
		idleAnimation();
		g.drawImage(odin, getX(), getY(), getW(), getH(), null);
	}
	
	public void drawBullets(ArrayList<BossBullet> bullets, Graphics g, Graphics2D g2d) {
		for(int i = 0; i < bullets.size(); i++) {
			bullets.get(i).draw(g, g2d);
		}
	}
	
	public void idleAnimation() {
		animationTimer++;
		if (animationTimer <= 10) {
			odin = odinIdle[0];
		} else if (animationTimer <= 10*2) {
			odin = odinIdle[1];
		} else if (animationTimer <= 10*3) {
			odin = odinIdle[2];
		} else if (animationTimer <= 10*4) {
			odin = odinIdle[3];
		} else if (animationTimer <= 10*5) {
			odin = odinIdle[4];
		} else if (animationTimer <= 10*6) {
			odin = odinIdle[5];
		} else 
			animationTimer = 0;
	}
	
	public void drawHealth(int x, int y, int w, int h, Graphics g) {
		g.setColor(Color.RED);
		g.fillRect(x+69, y, health/25, h);
		g.setColor(Color.ORANGE);
		g.fillRect(x+69, y, health2/25, h);
		g.setColor(Color.WHITE);
		g.drawRect(x+69, y, w-138, h);
	}
	
	public void drawTimer(int x, int y, Graphics g) {
		Font f = new Font("Times New Roman", 60, 60);
		if (attackTimer > 0)
			attackTimer -= 1;
		
		g.setFont(f);
		if (attackTimer >= 1000)
			g.drawString(Integer.toString(attackTimer/100), x, y);
		else
			g.drawString("0" + Integer.toString(attackTimer/100), x, y);
	}
	
	public void drawIndicator(Graphics g) {
		g.drawImage(indicator, getX()-(getW()/2), 746, (getW()*2), 45, null);
	}
	
//	Getters
	
	public int getX() {
		return coordinates.getX();
	}
	
	public int getY() {
		return coordinates.getY();
	}
	
	public int getW() {
		return w;
	}
	
	public int getH() {
		return h;
	}
	
	public int getHealth() {
		return health;
	}
	
	public int getHealth2() {
		return health2;
	}
	
	public boolean getBonus() {
		return bonus;
	}
	
	public int getTimer() {
		return attackTimer;
	}
	
//	Setters

	public void setX(int x) {
		coordinates.setX(x);
	}
	
	public void setY(int y) {
		coordinates.setY(y);
	}
	
	public void setW(int w) {
		this.w = w;
	}
	
	public void setH(int h) {
		this.h = h;
	}
	
	public void setHealth(int h) {
		health = h;
	}
	
	public void setHealth2(int h) {
		health2 = h;
	}
	
	public void setBonus(boolean b) {
		bonus = b;
	}
	
	public void setTimer(int t) {
		attackTimer = t;
	}
	
}
