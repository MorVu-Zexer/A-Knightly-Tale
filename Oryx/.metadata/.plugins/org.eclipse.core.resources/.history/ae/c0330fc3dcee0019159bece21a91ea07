package objects;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;

public class Platform {

	private Point coordinates = null;
	private int width, height;

//	Constructor

	public Platform(int x, int y, int w, int h) {
		coordinates = new Point(x, y);
		width = w;
		height = h;
	}

//	Methods

	public boolean move() {
		return false;
	}

	public void print() {
		System.out.println("Coordinates: " + coordinates.getX() + ", " + coordinates.getY());
		System.out.println("Width: " + getW() + " Height: " + getH());
	}

	public void draw(Graphics g) {
		g.setColor(Color.WHITE);
		g.drawRect(getX(), getY(), getW(), getH());
	}

	public void collision(Batman batman, Platform[] platform) {
//		Platform collision
		for (int i = 0; i < platform.length; i++) {
			if (batman.collisionPlatform(platform[i])) {
				int xDifference, yDifference;
				boolean xPositive = true, yPositive = true;
				if (batman.getX() + batman.getW() < platform[i].getX() + (platform[i].getW() / 2)) {
					xDifference = ((batman.getX() + batman.getW()) - platform[i].getX());
				} else {
					xDifference = ((platform[i].getX() + platform[i].getW()) - batman.getX());
					xPositive = false;
				}
				if (batman.getY() + batman.getH() < platform[i].getY() + (platform[i].getH() / 2)) {
					yDifference = ((batman.getY() + batman.getH()) - platform[i].getY());
				} else {
					yDifference = ((platform[i].getY() + platform[i].getH()) - batman.getY());
					yPositive = false;
				}
				if (xDifference < yDifference) {
					if (xPositive) {
						batman.setX(batman.getX() - xDifference);
					} else {
						batman.setX(batman.getX() + xDifference);
					}
				} else if (xDifference > yDifference) {
					if (yPositive) {
						batman.setY(batman.getY() - yDifference);
						batman.setGravity(1.5);
						if (batman.getJump()) {
							batman.setLanding(true);
							batman.setJump(false);
						}
					} else {
						batman.setY(batman.getY() + yDifference);
					}
				}
			}
		}
	}

	public void collisionEnemy(Enemy[] enemy, Platform[] platform) {
//		Platform collision
		for (int i = 0; i < platform.length; i++) {
			for (int i2 = 0; i2 < enemy.length; i2++) {
				if (enemy[i2].collisionPlatform(platform[i])) {
					int xDifference, yDifference;
					boolean xPositive = true, yPositive = true;
					if (enemy[i2].getX() + enemy[i2].getW() < platform[i].getX()
							+ (platform[i].getW() / 2)) {
						xDifference = ((enemy[i2].getX() + enemy[i2].getW()) - platform[i].getX());
					} else {
						xDifference = ((platform[i].getX() + platform[i].getW()) - enemy[i2].getX());
						xPositive = false;
					}
					if (enemy[i2].getY() + enemy[i2].getH() < platform[i].getY()
							+ (platform[i].getH() / 2)) {
						yDifference = ((enemy[i2].getY() + enemy[i2].getH()) - platform[i].getY());
					} else {
						yDifference = ((platform[i].getY() + platform[i].getH()) - enemy[i2].getY());
						yPositive = false;
					}
					if (xDifference < yDifference) {
						if (xPositive) {
							enemy[i2].setX(enemy[i2].getX() - xDifference);
						} else {
							enemy[i2].setX(enemy[i2].getX() + xDifference);
						}
					} else if (xDifference > yDifference) {
						if (yPositive) {
							enemy[i2].setY(enemy[i2].getY() - yDifference);
							enemy[i2].setGravity(1.5);
						} else {
							enemy[i2].setY(enemy[i2].getY() + yDifference);
						}
					}
				}
			}
		}
	}

//	Getters

	public int getX() {
		return coordinates.getX();
	}

	public int getY() {
		return coordinates.getY();
	}

	public int getW() {
		return width;
	}

	public int getH() {
		return height;
	}
	
//	Setters

	public void setX(int x) {
		coordinates.setX(x);
	}

	public void setY(int y) {
		coordinates.setY(y);
	}

	public void setW(int w) {
		width = w;
	}

	public void setH(int h) {
		height = h;
	}

	public void setProperties(int x, int y, int w, int h) {
		setX(x);
		setY(y);
		setW(w);
		setH(h);
	}
	
}
