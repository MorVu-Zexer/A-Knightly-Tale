package objects;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

public class Odin {
	
//	Variables

	private Point coordinates;
	private int w, h;
	
	private double t = 158;
	private double moveX, moveY;
	
	private int health = 13800, health2 = 1380;
	
//	private boolean attacking;
	
	private int defeatCounter = 0; // Times Odin's health has been reduced to 0 and dictates which attacks are used.
	private boolean invincible = false;
	private int invincibleTimer = 100 ;
	
	private int animationTimer;
	
	private BufferedImage[] odinIdle = new BufferedImage[6];
	private BufferedImage[] odinAttack = new BufferedImage[13];
	
	private BufferedImage odinIndicator;
	
	private int attackTimer = 3000;
	private boolean bonus = false;
	
	private boolean displayPoints = false;
	private int displayPointsTimer = 100;
	private ArrayList<Integer> displayPointsX = new ArrayList<Integer>();
	private ArrayList<Integer> displayPointsY = new ArrayList<Integer>();
	
	private Image odin;
	private Image indicator;

	private File damage00[] = new File[8];
	private AudioInputStream damage01[] = new AudioInputStream[8];
	private Clip damageSFX[] = new Clip[8];
	private File timeout00;
	private AudioInputStream timeout01;
	private Clip timeoutSFX;
	private File enep00;
	private AudioInputStream enep01;
	private Clip enep00SFX;
	private File enep10;
	private AudioInputStream enep11;
	private Clip enep10SFX;
	
	AttackList attack = new AttackList();
	
	SpellCircle spellCircle;
	ArrayList<SpellCircle> attackCircle = new ArrayList<SpellCircle>();
	double circleAngle = 0;
	
	AffineTransform at = new AffineTransform();
	
//	Constructor
	
	public Odin(int x, int y, int w, int h){
		coordinates = new Point(x, y);
		this.w = w;
		this.h = h;
		bufferImages();
		odin = odinIdle[0];
		indicator = odinIndicator;
		assignClips();
		spellCircle = new SpellCircle(getX()-60, getY()-50, 175, 175, true);
	}
	
//	Methods
	
	public void bufferImages() {
//		Idle Frames
		for(int i = 0; i < odinIdle.length; i++) {
			try {
			    odinIdle[i] = ImageIO.read(new File("src/images/Odin"+(i+1)+".png"));
			} catch (IOException e) { 
			}
		}
//		Attack Frames
		for(int i = 0; i < odinAttack.length; i++) {
			try {
			    odinAttack[i] = ImageIO.read(new File("src/images/Odin"+(i+1)+".png"));
			} catch (IOException e) { 
			}
		}
//		Indicator
		try {
			odinIndicator = ImageIO.read(new File("src/images/Enemy_Indicator.png"));
		} catch (IOException e) {
		}
	}	
	
	public void assignClips() {
//		Damage
		try {
			for (int i = 0; i < damageSFX.length; i++) {
				damage00[i] = new File("src/sounds/damage.wav");
				damage01[i] = AudioSystem.getAudioInputStream(damage00[i]);
			}
		} catch (UnsupportedAudioFileException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			for (int i = 0; i < damageSFX.length; i++) {
				damageSFX[i] = AudioSystem.getClip();
				damageSFX[i].open(damage01[i]);
			}
		} catch (LineUnavailableException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
//		Timeout
		try {
			timeout00 = new File("src/sounds/timeout.wav");
			timeout01 = AudioSystem.getAudioInputStream(timeout00);
		} catch (UnsupportedAudioFileException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			timeoutSFX = AudioSystem.getClip();
			timeoutSFX.open(timeout01);
		} catch (LineUnavailableException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
//		Attack End
		try {
			enep00 = new File("src/sounds/enep00.wav");
			enep01 = AudioSystem.getAudioInputStream(enep00);
		} catch (UnsupportedAudioFileException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			enep00SFX = AudioSystem.getClip();
			enep00SFX.open(enep01);
		} catch (LineUnavailableException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
//		Attack End Strong
		try {
			enep10 = new File("src/sounds/enep01.wav");
			enep11 = AudioSystem.getAudioInputStream(enep10);
		} catch (UnsupportedAudioFileException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			enep10SFX = AudioSystem.getClip();
			enep10SFX.open(enep11);
		} catch (LineUnavailableException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
//	Logic
	
	public void attack(ArrayList<BossBullet> bullets, Player player) {
		for (int i = 0; i < bullets.size(); i++) {
			bullets.get(i).move();		
		}
		
		if (attackTimer <= 0) {
			if (getHealth() > 1380) {
				setHealth(1380);
			} else if (getHealth() > 0) {
				setHealth(0);
				setHealth2(0);
			}
			attackTimer = 3000;
		}
		
		if (getHealth() <= 0) {
			defeatCounter += 1;
			attack.rest();
			attackTimer = 3000+(1000*defeatCounter);
			removeCircles();
			setBonus(false);
			setHealth(13800);
			setHealth2(1380);
			soundAttackEndStrong();
			t = 158;
		}
		if (getHealth() == 1380 && !getBonus()) {
			attack.rest();
			attackTimer = 3000+(1000*defeatCounter);
			removeCircles();
			setBonus(true);
			soundAttackEnd();
			t = 158;
		}
		
		if (!getInvincible()) {
			
//			switch (defeatCounter) {
//				case 0 :
//					if (getHealth() > 1380) {
//						attack.flower(bullets, getX() + (getW()/2), getY() + (getH()/2));
//					} else {
//						attack.zigzag(bullets, getX() + (getW()/2), getY() + (getH()/2));
//					}
//					break;
//				case 1 :
//					if (getHealth() > 1380) {
//						attack.vortex(bullets, getX() + (getW()/2), getY() + (getH()/2));
//					} else {
//						attack.fractal(bullets, getX() + (getW()/2), getY() + (getH()/2));
//					}
//					break;
//				case 2 :
//					if (getHealth() > 1380) {
//						attack.chaser(bullets, getX()+(getW()/2), getY()+(getH()/2), player.getX()+(player.getW()/2), player.getY()+(player.getH()/2));
//						moveFigureEight();
//					} else {
//						if (getX() != 326 && getY() != 100) {
//						moveStraight(326, 100);
//						removeAllBullets(bullets);		
//						}else {
//							if (attackCircle.size() != 2) {
//								attackCircle.add(new SpellCircle((326-(getW()/2))-200, getY()+(getH())-100, 100, 100, true));
//								attackCircle.add(new SpellCircle((326-(getW()/2))+200, getY()+(getH())-100, 100, 100, false));
//							}
//							attack.circle(bullets, getX() + (getW()/2), getY() + (getH()/2), 25);
//							attack.doubleSpiral(bullets, (getX() + (getW()/2)) - 200, getY() + (getH()/2), (getX() + (getW()/2)) + 200, getY() + (getH()/2));
//						}
//					}
//					break;
//				case 3 :
//					if (getHealth() > 1380) {
//						attack.imperishableLotus(bullets, getX() + (getW()/2), getY() + (getH()/2));
//						while (attackCircle.size() != 12) {
//							if (attackCircle.size() < 6) {
//								double circleX = getX() + (Math.sin((Math.toRadians(circleAngle)))*(175/2));
//								double circleY = getY() + (Math.cos((Math.toRadians(circleAngle)))*(175/2));
//								attackCircle.add(new SpellCircle((int)circleX, (int)circleY, 50, 50, false));
//							} else {
//								double circleX = getX() + (Math.sin((Math.toRadians(circleAngle)))*(175/2));
//								double circleY = getY() + (Math.cos((Math.toRadians(circleAngle)))*(175/2));
//								attackCircle.add(new SpellCircle((int)circleX, (int)circleY, 50, 50, true));
//							}
//							circleAngle+=60;
//						}
//						for (int i = 0; i < attackCircle.size(); i++) {
//							if (circleAngle > 360) {
//								circleAngle -= 360;
//							}
//							if (i < 6) {
//								attackCircle.get(i).orbit(getX(), getY()+10, -(Math.toRadians(circleAngle)), 175/2);
//								attack.genericSprial(bullets, attackCircle.get(i).getX()+(attackCircle.get(i).getW()/2), attackCircle.get(i).getY()+(attackCircle.get(i).getH()/2), 60, true);
//							} else {
//								attackCircle.get(i).orbit(getX(), getY()+10, (Math.toRadians(circleAngle)), 125);
//								attack.genericSprial(bullets, attackCircle.get(i).getX()+(attackCircle.get(i).getW()/2), attackCircle.get(i).getY()+(attackCircle.get(i).getH()/2), 60, false);
//							}
//							circleAngle+=60;
//						}
//						circleAngle++;
//					} else {
//						attack.absoluteChaos(bullets, getX() + (getW()/2), getY() + (getH()/2));
//						moveFigureEight();
//					}
//			}
			
			if (defeatCounter == 0 && getHealth() > 1380) {
				attack.flower(bullets, getX() + (getW()/2), getY() + (getH()/2));
			} else if (defeatCounter == 0 && getHealth() <= 1380) {
				attack.zigzag(bullets, getX() + (getW()/2), getY() + (getH()/2));
			} else if (defeatCounter == 1 && getHealth() > 1380) {
				attack.vortex(bullets, getX() + (getW()/2), getY() + (getH()/2));
			} else if (defeatCounter == 1 && getHealth() <= 1380) {
				attack.fractal(bullets, getX() + (getW()/2), getY() + (getH()/2));
			} else if (defeatCounter == 2 && getHealth() > 1380) {
				attack.chaser(bullets, getX()+(getW()/2), getY()+(getH()/2), player.getX()+(player.getW()/2), player.getY()+(player.getH()/2));
				moveFigureEight();
			} else if (defeatCounter == 2 && getHealth() <= 1380) {
				if (getX() != 326 && getY() != 100) {
					moveStraight(326, 100);
					removeAllBullets(bullets);		
				} else {
					if (attackCircle.size() != 2) {
						attackCircle.add(new SpellCircle((326-(getW()/2))-200, getY()+(getH())-100, 100, 100, true));
						attackCircle.add(new SpellCircle((326-(getW()/2))+200, getY()+(getH())-100, 100, 100, false));
					}
					attack.circle(bullets, getX() + (getW()/2), getY() + (getH()/2), 25);
					attack.doubleSpiral(bullets, (getX() + (getW()/2)) - 200, getY() + (getH()/2), (getX() + (getW()/2)) + 200, getY() + (getH()/2));
				}
			} else if (defeatCounter == 3 && getHealth() > 1380) {
				attack.imperishableLotus(bullets, getX() + (getW()/2), getY() + (getH()/2));
				while (attackCircle.size() != 12) {
					if (attackCircle.size() < 6) {
						double circleX = getX() + (Math.sin((Math.toRadians(circleAngle)))*(175/2));
						double circleY = getY() + (Math.cos((Math.toRadians(circleAngle)))*(175/2));
						attackCircle.add(new SpellCircle((int)circleX, (int)circleY, 50, 50, false));
					} else {
						double circleX = getX() + (Math.sin((Math.toRadians(circleAngle)))*(175/2));
						double circleY = getY() + (Math.cos((Math.toRadians(circleAngle)))*(175/2));
						attackCircle.add(new SpellCircle((int)circleX, (int)circleY, 50, 50, true));
					}
					circleAngle+=60;
				}
				for (int i = 0; i < attackCircle.size(); i++) {
					if (circleAngle > 360) {
						circleAngle -= 360;
					}
					if (i < 6) {
						attackCircle.get(i).orbit(getX(), getY()+10, -(Math.toRadians(circleAngle)), 175/2);
						attack.genericSprial(bullets, attackCircle.get(i).getX()+(attackCircle.get(i).getW()/2), attackCircle.get(i).getY()+(attackCircle.get(i).getH()/2), 60, true);
					} else {
						attackCircle.get(i).orbit(getX(), getY()+10, (Math.toRadians(circleAngle)), 125);
						attack.genericSprial(bullets, attackCircle.get(i).getX()+(attackCircle.get(i).getW()/2), attackCircle.get(i).getY()+(attackCircle.get(i).getH()/2), 60, false);
					}
					circleAngle+=60;
				}
				circleAngle++;
			} else if (defeatCounter == 3 && getHealth() <= 1380) {
				attack.absoluteChaos(bullets, getX() + (getW()/2), getY() + (getH()/2));
				moveFigureEight();
			} else if (defeatCounter == 4 && getHealth() > 1380) {
			}
		}
		
		
//		attack.fractal(bullets, getX() + (getW()/2), getY() + (getH()/2)); !Don't use!		
//		attack.doubleSpiral(bullets, (getX() + (getW()/2)) - 200, getY() + (getH()/2), (getX() + (getW()/2)) + 200, getY() + (getH()/2));
//		attack.circle(bullets, getX() + (getW()/2), getY() + (getH()/2));
//		attack.accelerate(bullets, getX() + (getW()/2), getY() + (getH()/2));
	}
	
	public void moveFigureEight() {
//		Figure Eight
		moveX = ((200 * Math.cos(t/100)) + 326);
		moveY = ((50 * Math.sin((t/100)*2)) + 100);
			
		setX((int)moveX);
		setY((int)moveY);
		
		t++;
	}
	
	public void moveStraight(int targetX, int targetY) {
//		TODO
//		Goes straight to the target location.
//		Also some issues
		
		double tempAngle = Math.atan2(getX()-targetX, getY()-targetY);
		
		double angleX, angleY;
		
		angleX = Math.sin(tempAngle);
		angleY = Math.cos(tempAngle);
		
		moveX = (double)getX()-angleX;
		moveY = (double)getY()-angleY;
		
		setX((int)Math.round(moveX));
		setY((int)Math.round(moveY));
	}
	
	public void collision(ArrayList<PlayerBullet> bullets, Player player) {
		for(int i = 0; i < bullets.size(); i++) {
			if (bullets.get(i).getX() + bullets.get(i).getW() > getX() && bullets.get(i).getY() + bullets.get(i).getH() > getY()
					&& getX() + getW() > bullets.get(i).getX() && getY() + getH() > bullets.get(i).getY()) {
				bullets.remove(i);
				player.setScore(player.getScore() + 20);
				soundDamage();
				if (getHealth() > 1380) {
					health -= 20;
				} else {
					health -= 4;
					health2 -= 4;	
				}
			}
		}
	}
	
	public void removeBullets(ArrayList<BossBullet> bullets) {
		for (int i = 0; i < bullets.size(); i++) {
			if (bullets.get(i).getX() + bullets.get(i).getW() < 10 || bullets.get(i).getY() + bullets.get(i).getH() < 15 ||
					bullets.get(i).getX() > 715 || bullets.get(i).getY() > 756) {
				bullets.remove(i);
			}
		}
	}
	
	public void removeAllBullets(ArrayList<BossBullet> bullets) {
		for (int i = 0; i < bullets.size(); i++) {
			while (bullets.size() != 0) {
				bullets.remove(i);
			}
		}
	}
	
	public void removeCircles() {
		while (attackCircle.size() != 0) {
			for (int i = 0; i < attackCircle.size(); i++) {
				attackCircle.remove(i);
			}
		}
	}
	
//	Graphics
	
	public void draw(Graphics g, Graphics2D g2d) {
		spellCircle.drawCircle2(spellCircle.getX(), spellCircle.getY(), spellCircle.getW(), spellCircle.getH(), true, g, g2d);
		spellCircle.setX(getX() - 60);
		spellCircle.setY(getY() - 50);
		for (int i = 0; i < attackCircle.size(); i++) {
			attackCircle.get(i).drawCircle1(attackCircle.get(i).getX(), attackCircle.get(i).getY(), attackCircle.get(i).getW(), attackCircle.get(i).getH(), attackCircle.get(i).getClockwise(), g, g2d);
		}
		
		idleAnimation();
		g.drawImage(odin, getX(), getY(), getW(), getH(), null);
	}
	
	public void drawBullets(ArrayList<BossBullet> bullets, Graphics g, Graphics2D g2d) {
		for(int i = 0; i < bullets.size(); i++) {
			bullets.get(i).draw(g, g2d);
		}
	}

	public void drawBulletPoints(ArrayList<BossBullet> bullets, Graphics g) {
		g.setColor(Color.WHITE);
		for (int i = 0; i < bullets.size(); i++) {
			displayPointsX.add(bullets.get(i).getX()-15);
			displayPointsY.add(bullets.get(i).getY());
		}
		for (int i = 0; i < displayPointsX.size(); i++) {
			g.drawString("+1000", displayPointsX.get(i), displayPointsY.get(i));
		}
	}
	
	public void removeBulletPoints() {
		while (displayPointsX.size() != 0) {
			for (int i = 0; i < displayPointsX.size(); i++) {
				displayPointsX.remove(i);
				displayPointsY.remove(i);
			}
		}
	}
	
	public void idleAnimation() {
		animationTimer++;
		if (animationTimer <= 10) {
			odin = odinIdle[0];
		} else if (animationTimer <= 10*2) {
			odin = odinIdle[1];
		} else if (animationTimer <= 10*3) {
			odin = odinIdle[2];
		} else if (animationTimer <= 10*4) {
			odin = odinIdle[3];
		} else if (animationTimer <= 10*5) {
			odin = odinIdle[4];
		} else if (animationTimer <= 10*6) {
			odin = odinIdle[5];
		} else 
			animationTimer = 0;
	}
	
	public void drawHealth(int x, int y, int w, int h, Graphics g) {
		g.setColor(Color.RED);
		g.fillRect(x+69, y, health/25, h);
		g.setColor(Color.ORANGE);
		g.fillRect(x+69, y, health2/25, h);
		g.setColor(Color.WHITE);
		g.drawRect(x+69, y, w-138, h);
	}
	
	public void drawTimer(int x, int y, Graphics g) {
		Font f = new Font("Times New Roman", 60, 60);
		if (attackTimer > 0)
			attackTimer -= 1;
		
		g.setFont(f);
		if (attackTimer > 9900) {
			g.drawString("99", x, y);
		} else if (attackTimer >= 1000)
			g.drawString(Integer.toString(attackTimer/100), x, y);
		else
			g.drawString("0" + Integer.toString(attackTimer/100), x, y);
		

		if (attackTimer <= 1100 && attackTimer % 100 == 0 && attackTimer != 0) {
			soundTimeout();
		}
	}
	
	public void drawIndicator(Graphics g) {
		g.drawImage(indicator, getX()-(getW()/2), 746, (getW()*2), 45, null);
	}
	
//	Sounds
	
	public void soundDamage() {	
		if (!damageSFX[7].isRunning() && damageSFX[6].isRunning()) {
			damageSFX[7].setFramePosition(0);
			damageSFX[7].start();
		} 
		if (!damageSFX[6].isRunning() && damageSFX[5].isRunning()) {
			damageSFX[6].setFramePosition(0);
			damageSFX[6].start();
		} 
		if (!damageSFX[5].isRunning() && damageSFX[4].isRunning()) {
			damageSFX[5].setFramePosition(0);
			damageSFX[5].start();
		} 
		if (!damageSFX[4].isRunning() && damageSFX[3].isRunning()) {
			damageSFX[4].setFramePosition(0);
			damageSFX[4].start();
		} 
		if (!damageSFX[3].isRunning() && damageSFX[2].isRunning()) {
			damageSFX[3].setFramePosition(0);
			damageSFX[3].start();
		} 
		if (!damageSFX[2].isRunning() && damageSFX[1].isRunning()) {
			damageSFX[2].setFramePosition(0);
			damageSFX[2].start();
		} 
		if (!damageSFX[1].isRunning() && damageSFX[0].isRunning()) {
			damageSFX[1].setFramePosition(0);
			damageSFX[1].start();
		} 
		if (!damageSFX[0].isRunning()) {
			damageSFX[0].setFramePosition(0);
			damageSFX[0].start();
		}
	}

	public void soundTimeout() {
		timeoutSFX.stop();
		timeoutSFX.setFramePosition(0);
		timeoutSFX.start();
	}
	
	public void soundAttackEnd() {
		enep00SFX.stop();
		enep00SFX.setFramePosition(0);
		enep00SFX.start();
	}
	
	public void soundAttackEndStrong() {
		enep10SFX.stop();
		enep10SFX.setFramePosition(0);
		enep10SFX.start();
	}
	
//	Getters
	
	public int getX() {
		return coordinates.getX();
	}
	
	public int getY() {
		return coordinates.getY();
	}
	
	public int getW() {
		return w;
	}
	
	public int getH() {
		return h;
	}
	
	public int getHealth() {
		return health;
	}
	
	public int getHealth2() {
		return health2;
	}
	
	public boolean getBonus() {
		return bonus;
	}
	
	public int getTimer() {
		return attackTimer;
	}
	
	public boolean getInvincible() {
		return invincible;
	}
	
	public int getInvincibleTimer() {
		return invincibleTimer;
	}
	
	public boolean getDisplayPoints() {
		return displayPoints;
	}
	
	public int getDisplayPointsTimer() {
		return displayPointsTimer;
	}
	
//	Setters

	public void setX(int x) {
		coordinates.setX(x);
	}
	
	public void setY(int y) {
		coordinates.setY(y);
	}
	
	public void setW(int w) {
		this.w = w;
	}
	
	public void setH(int h) {
		this.h = h;
	}
	
	public void setHealth(int h) {
		health = h;
	}
	
	public void setHealth2(int h) {
		health2 = h;
	}
	
	public void setBonus(boolean b) {
		bonus = b;
	}
	
	public void setInvincible(boolean i) {
		invincible = i;
	}
	
	public void setInvincibleTimer(int iT) {
		invincibleTimer = iT;
	}
	
	public void setTimer(int t) {
		attackTimer = t;
	}
	
	public void setDisplayPoints(boolean dP) {
		displayPoints = dP;
	}
	
	public void setDisplayPointsTimer(int dPT) {
		displayPointsTimer = dPT;
	}
	
}
