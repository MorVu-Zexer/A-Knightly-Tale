import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.Timer;

import objects.Batarang;
import objects.Batman;
import objects.Enemy;
import objects.Platform;

public class GUI extends JPanel implements ActionListener, KeyListener {
	// VARIABLES THAT NEED TO BE ACCESSED BY ALL METHODS
	// NOTE THAT IF ITS NOT SUPER OBVIOUS YOU SHOULD HAVE A COMMENT INDICATING WHAT
	// THESE VARIABLES ARE USED FOR
	Timer t;

	Font arial = new Font("arial", 0, 50);

//	60, 100
	Batman batman = new Batman(10, 10, 96, 162, 1.5, 0);
	ArrayList<Batarang> batarang = new ArrayList<Batarang>();
	ArrayList<Platform> platform = new ArrayList<Platform>();
	ArrayList<Enemy> enemy = new ArrayList<Enemy>();

	public GUI() {
		initComponents();
		t = new Timer(10, this);
		t.start();

		// LOAD ANY IMAGES HERE:
		/// Try's to get the images, this should be in batman class
		
		platform.add(0, new Platform(0, 500, 400, 400));
		platform.add(1, new Platform(600, 350, 600, 600));
		platform.add(2, new Platform(1200, 550, 400, 650));
		platform.add(3, new Platform(1850, 450, 700, 650));
		platform.add(4, new Platform(2750, 300, 400, 50));
		
		enemy.add(0, new Enemy(750, 0, 90, 160, 1.5, "Left"));
		enemy.add(1, new Enemy(1900, 0, 90, 160, 1.5, "Right"));
	}

	/// Paints background
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.setFont(arial);
		g.fillRect(0, 0, 1200, 1000);
		// next line that draws image
		
		for (int i = 0; i < platform.size(); i++) {
			platform.get(i).draw(g);
		}
		for (int i = 0; i < enemy.size(); i++) {
			enemy.get(i).draw(g);
		}
		for (int i = 0; i < batarang.size(); i++) {
			batarang.get(i).draw(g);
		}
		
		batman.draw(g);

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		batmanActions();
		enemyActions();
		batarangActions();
//		Platform collision for Batman and enemies
		for (int i = 0; i < platform.size(); i++) {
			if (batman.collisionPlatform(platform.get(i))) {
				platform.get(i).collision(batman, platform);
			}
			for (int i2 = 0; i2 < enemy.size(); i2++) {
				if (enemy.get(i2).collisionPlatform(platform.get(i))) {
					platform.get(i).collisionEnemy(enemy, platform);
				}
			}
		}
//		Enemy collision with Batman
		for (int i = 0; i < enemy.size(); i++) {
			if (batman.collisionEnemy(enemy.get(i))) {
				batman.setDeaths(batman.getDeaths() + 1);
				reset();
			}
		}
		
		repaint();
	}
	
	public void reset() {
//		Resets Batman
		batman.setProperties(10, 10, 96, 162, 1.5);
//		Resets platforms
		platform.get(0).setProperties(0, 500, 400, 400);
		platform.get(1).setProperties(600, 350, 600, 600);
		platform.get(2).setProperties(1200, 550, 400, 650);
		platform.get(3).setProperties(1850, 450, 700, 650);
		platform.get(4).setProperties(2750, 300, 400, 50);
//		Resets enemies
		enemy.get(0).setProperties(750, 0, 90, 160, 1.5, "Left");
		enemy.get(1).setProperties(1900, 0, 90, 160, 1.5, "Right");
	}
	
	public void batmanActions() {
//		everything that moves batman
		batman.gravity();
		batman.movement(platform, enemy);
		if (batman.getJump() && !batman.getLanding()) batman.jump();
		else if (batman.getCrouch()) {
			batman.crouch();
		}
		batman.attack(batarang);
	}
	
	public void enemyActions() {
//		everything that moves enemies
		for(int i = 0; i < enemy.size(); i++) {
			enemy.get(i).gravity();
			enemy.get(i).movement(platform);
//			if (batman.getJump() && !batman.getLanding()) batman.jump();
//			else if (batman.getCrouch()) {
//				batman.crouch();
//			}
		}
	}

	public void batarangActions() {
		for (int i = 0; i < batarang.size(); i++) {
			batarang.get(i).gravity();
			batarang.get(i).moveBatarang();
		}
	}
	
	// USED FOR INTERACTION THAT INCLUDES DRAGGING OF MOUSE
	public void dragMouse(MouseEvent e) {
	}

	// USED FOR INTERACTION THAT INCLUDES RELEASING OF MOUSEBUTTON
	public void releaseMouse(MouseEvent e, Graphics g) {
	}

	// DON't TOUCH THE INITIALIZING COMPONENTS METHOD
	private void initComponents() {
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		this.addMouseMotionListener(new MouseMotionAdapter() {
			@Override
			public void mouseDragged(MouseEvent e) {
				dragMouse(e);
				repaint();
			}
		});
		addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				Graphics g = null;
				releaseMouse(e, g);
			}
		});
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 400, Short.MAX_VALUE));
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 300, Short.MAX_VALUE));

	}

//	Key input

	public void keyReleased(KeyEvent e) {
		// method initiated when a key is released
		if (e.getKeyCode() == KeyEvent.VK_A) {
			batman.setLeft(false);
		}
		if (e.getKeyCode() == KeyEvent.VK_D) {
			batman.setRight(false);
		}
		if (e.getKeyCode() == KeyEvent.VK_S && !batman.getJump()) {
			batman.setCrouch(false);
			batman.setH(162);
			batman.setY(batman.getY() - 56);
		}
		if (e.getKeyCode() == KeyEvent.VK_E) {
			batman.setMelee(false);
		}
		if (e.getKeyCode() == KeyEvent.VK_Q) {
			batman.setRanged(false);
		}
	}

	public void keyPressed(KeyEvent e) {
		// method initiated when a key is pressed
		if (e.getKeyCode() == KeyEvent.VK_A) {
			batman.setDirection("Left");
			batman.setLeft(true);
		}
		if (e.getKeyCode() == KeyEvent.VK_D) {
			batman.setDirection("Right");
			batman.setRight(true);
		}
		if (e.getKeyCode() == KeyEvent.VK_S && !batman.getJump()) {
				batman.setCrouch(true);
		}
		if (e.getKeyCode() == KeyEvent.VK_SPACE || e.getKeyCode() == KeyEvent.VK_W) {
			batman.setJump(true);
		}
		if (e.getKeyCode() == KeyEvent.VK_E) {
			batman.setMelee(true);
		}
		if (e.getKeyCode() == KeyEvent.VK_Q) {
			batman.setRanged(true);
		}
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
}
