package objects;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

public class Batman {
	
	private Point coordinates = null;
	private Point imgCoordinates = null;
	private int w, h;
	private int imgW, imgH;
	private double gravity;
	private int deaths;
/*	FRAMES (by index spot):
	0-5 = Right; 6-11 = Left;
	12-17 = Jump Right; 18 = Land Right;
	19-24 = Jump Left; 25 = Land Left;
*/
	private BufferedImage[] images = new BufferedImage[26];
	private int frame, frameTimer = 0;
	private boolean left = false, right = false, jump = false, landing = false;
	private String direction = "";
	
//	Constructor
	
	public Batman(int x, int y, int w, int h, double g, int d){
		try {
			for (int i = 0; i < images.length; i++) {
				images[i] = ImageIO.read(new File("src/img/batman" + i + ".png"));
			}
		} catch (IOException e) {
			System.out.println("NOT LOADED");
		}
		
		coordinates = new Point(x, y);
		imgCoordinates = new Point(x, y);
		this.w = w;
		this.h = h;
		imgW = w;
		imgH = h;
		gravity = g;
		deaths = d;
	}
	
//	Methods
	
	public boolean collisionPlatform(Platform p){
		if (getX() > p.getX() + p.getW() && getY() > p.getY() + p.getH() && p.getX() > getX() + getW() && p.getY() > getY() + getH()) {
			return true;
		} else 
			return false;
	}
	
	public boolean collisionEnemy(Enemy e) {
		if (getX() > e.getX() + e.getW() && getY() > e.getY() + e.getH() && e.getX() > getX() + getW() && e.getY() > getY() + getH()) {
			return true;
		} else 
			return false;
	}
	
	public void print() {
//		prints out everything about Batman
		System.out.println("Coordinates: " + coordinates.getX() + ", " + coordinates.getY());
		System.out.println("Width: " + getW() + " | Height: " + getH());
		System.out.println("Gravity: " + getGravity());
		System.out.println("Deaths: " + getDeaths());
		System.out.println("Left: " + getLeft() + " | Right: " + getRight());
		System.out.println("Jumping: " + getJump() + " | Landing: " + getLanding());
	}
	
	public void gravity() {
//		allows Batman to fall
		if (getY() < (700 - getH())) {
			gravity += 0.2;
			setY(getY() + (int)gravity);
			setImgY(getImgY() + (int)gravity);
		} else if (getY() > (700 - getH())) { // This happens when Batman lands
			gravity = 0;
			if (jump) {
				landing = true;
				jump = false;
			}
			setY(700 - getH());
			setImgY(700 - getH());
		}
	}
	
	public void jump() {
//		allows Batman to jump
		landing = false;
		setY(getY() - 8);
		setImgY(getImgY() - 8);
	}
	
	public void movement() {
//		allows Batman to move around
		if (left) {
			setX(getX() - 3);
			setImgX(getImgX() - 3);
		}
		if (right) {
			setX(getX() + 3);
			setImgX(getImgX() + 3);
		}
	}
	
	public void draw(Graphics g) {
//		All of the Batman animation stuff
		imageResizing();
		
		if (getLeft() && getRight()) setDirection("Idle");
		else if (getLeft()) setDirection("Left");
		else if (getRight()) setDirection("Right");
		
		if (getLanding()) 
			animateLanding(getDirection(), g);
		else if (getJump())
			animateJump(getDirection(), g);
		else if (getLeft() || getRight())
			animateWalk(getDirection(), g);
		else if (getDirection() == "Left")
			frame = 11;
		else if (getDirection() == "Right")
			frame = 5;
		
		
		g.drawImage(images[frame], getImgX(), getImgY(), getImgW(), getImgH(), null);
		g.setColor(Color.white);
//		g.drawRect(getX(), getY(), getW(), getH());
		
//		print();
	}

	public void animateWalk(String direction, Graphics g) {
//		animates Batman's walk
		if (direction == "Left") {
			frameTimer++;
			if (frameTimer >= 10) {
				frame++;
				frameTimer = 0;
			}
			if (frame < 5 || frame > 11) {
				frame = 6;
			}
		} else if (direction == "Right") {
			frameTimer++;
			if (frameTimer >= 10) {
				frame++;
				frameTimer = 0;
			}
			if (frame >= 5) {
				frame = 0;
			}
		}
	}
	
	public void animateJump(String direction, Graphics g) {
//		animates Batman's jump
			System.out.println("yup");
		if (direction == "Left") {
			frameTimer++;
			if (frameTimer >= 10) {
				frame++;
				frameTimer = 0;
			}
			if (frame < 19) {
				frame = 19 ;
			}
			if (frame > 24) {
				frame = 24;
			}
		} else if (direction == "Right") {
			frameTimer++;
			if (frameTimer >= 10) {
				frame++;
				frameTimer = 0;
			}
			if (frame < 12) {
				frame = 12 ;
			}
			if (frame > 17) {
				frame = 17;
			}
		}
	}

	public void animateLanding(String direction, Graphics g) {
//		animates Batmna's landing
		if (direction == "Left") {
			frame = 25;
			frameTimer++;
			if (frameTimer >= 15) {
				setLanding(false);
			}
		} else if (direction == "Right") {
			frame = 18;
			frameTimer++;
			if (frameTimer >= 15) {
				setLanding(false);
			}
		}
	}
	
	public void imageResizing() {
			setImgX(getX() + (getW()/2) - ((images[frame].getWidth()/2)*2));
			setImgY(getY() + (getH()/2) - ((images[frame].getHeight()/2)*2));
			
			setImgW((images[frame].getWidth()*2));
			setImgH((images[frame].getHeight()*2));
	}
	
//	Getters

	public int getX() {
		return coordinates.getX();
	}
	
	public int getY() {
		return coordinates.getY();
	}
	
	public int getW() {
		return w;
	}
	
	public int getH() {
		return h;
	}

	public int getImgX() {
		return imgCoordinates.getX();
	}
	
	public int getImgY() {
		return imgCoordinates.getY();
	}
	
	public int getImgW() {
		return imgW;
	}
	
	public int getImgH() {
		return imgH;
	}
	
	public double getGravity() {
		return gravity;
	}
	
	public int getDeaths() {
		return deaths;
	}
	public boolean getLeft() {
		return left;
	}
	
	public boolean getRight() {
		return right;
	}
	
	public String getDirection() {
		return direction;
	}
	
	public boolean getJump() {
		return jump;
	}
	
	public boolean getLanding() {
		return landing;
	}
	
//	Setters
	
	public void setX(int x) {
		coordinates.setX(x);
	}
	
	public void setY(int y) {
		coordinates.setY(y);
	}
	
	public void setW(int w) {
		this.w = w;
	}
	
	public void setH(int h) {
		this.h = h;
	}

	public void setImgX(int x) {
		imgCoordinates.setX(x);
	}
	
	public void setImgY(int y) {
		imgCoordinates.setY(y);
	}
	
	public void setImgW(int w) {
		imgW = w;
	}
	
	public void setImgH(int h) {
		imgH = h;
	}
	
	public void setGravity(double gravity) {
		this.gravity = gravity;
	}
	
	public void setDeaths(int deaths) {
		this.deaths = deaths;
	}
	
	public void setLeft(boolean left) {
		this.left = left;
	}
	
	public void setRight(boolean right) {
		this.right = right;
	}
	
	public void setDirection(String direction) {
		this.direction = direction;
	}
	
	public void setJump(boolean jump) {
		this.jump = jump;
	}
	
	public void setLanding(boolean landing) {
		this.landing = landing;
	}
}
